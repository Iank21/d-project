// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Test {
  id              String      @id
  name            String      
  author          String
  description     String
  instruction     String
  
  Question        Question[]
  Answer          Answer[]
  Interpretation  Interpretation[]
  Recomendation Recomendation[]
}

model Question {
  id            String      @default(cuid()) @id
  name          String
  number        Int

  test          Test        @relation(fields: [test_id], references: [id])
  test_id       String
}

model Answer {
  id            String      @default(cuid()) @id
  name          String
  point         Int

  test          Test    @relation(fields: [test_id], references: [id])
  test_id       String
}

model Interpretation {
  id                   String      @id
  description          String
  maxPoint             Int
  minPoint             Int

  test                 Test        @relation(fields: [test_id], references: [id])
  test_id              String
}

model Recomendation {
  id                   String      @id
  description          String
  maxPoint             Int
  minPoint             Int

  test                 Test        @relation(fields: [test_id], references: [id])
  test_id              String
}

model User {
  id                  String      @id @default(cuid())
  name                String
  surname             String
  department          String
  email               String      @unique
  hashedPassword      String
  role                Role        @default(USER)

  Sessions            Session[]
  History_Stress      History_Stress[]
  History_Overworking History_Overworking[]
  History_Burnout     History_Burnout[]
}

model Session {
  id        String   @id
  expiresAt DateTime
  userId    String
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model History_Stress {
  id              String      @id @default(cuid())
  date            DateTime    @default(now())
  point           Int
  level           Level

  user            User        @relation(fields: [user_id], references: [id])
  user_id         String
}

model History_Overworking {
  id              String      @id @default(cuid())
  date            String      
  hours           Int

  user            User        @relation(fields: [user_id], references: [id])
  user_id         String
}

model History_Burnout {
  id              String      @id @default(cuid())
  date            DateTime    @default(now())

  user            User        @relation(fields: [user_id], references: [id])
  user_id         String

  History_Burnout_Item History_Burnout_Item[]
}

model History_Burnout_Item {
  id                      String                @id @default(cuid())
  name                    String
  point                   Int
  level                   Level

  History_Burnout         History_Burnout       @relation(fields: [History_Burnout_id], references: [id])
  History_Burnout_id      String
}


enum Role {
  USER
  ADMIN
}

enum Level {
  LOW
  MEDIUM
  HIGH
}